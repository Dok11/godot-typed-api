import type { GodotArray, GodotDictionary, NodePath, Rect2, Resource, TextureLayered, float, int } from "../index.d.ts";
/**
 * Contains baked lightmap and dynamic object probe data for `LightmapGI`.
 * 
 * `LightmapGIData` contains baked lightmap and dynamic object probe data for `LightmapGI`. It is replaced every time lightmaps are baked in `LightmapGI`.
 */
export class LightmapGIData extends Resource {
/**
 * The lightmap atlas textures generated by the lightmapper.
 */
  lightmapTextures: TextureLayered[];
/**
 * The lightmap atlas texture generated by the lightmapper.
 * @deprecated The lightmap atlas can now contain multiple textures. See `lightmap_textures`.
 */
  lightTexture: TextureLayered;
/**
 * The shadowmask atlas textures generated by the lightmapper.
 */
  shadowmaskTextures: TextureLayered[];
/**
 * Adds an object that is considered baked within this `LightmapGIData`.
 * @param path NodePath
 * @param uvScale Rect2
 * @param sliceIndex int
 * @param subInstance int
 */
  addUser(path: NodePath, uvScale: Rect2, sliceIndex: int, subInstance: int): void;
/**
 * Clear all objects that are considered baked within this `LightmapGIData`.
 */
  clearUsers(): void;
/**
 * Returns the number of objects that are considered baked within this `LightmapGIData`.
 * @returns int
 */
  getUserCount(): int;
/**
 * Returns the `NodePath` of the baked object at index `user_idx`.
 * @param userIdx int
 * @returns NodePath
 */
  getUserPath(userIdx: int): NodePath;
/**
 * If `true`, lightmaps were baked with directional information. See also `LightmapGI.directional`.
 * @returns boolean
 */
  isUsingSphericalHarmonics(): boolean;
/**
 * If `uses_spherical_harmonics` is `true`, tells the engine to treat the lightmap data as if it was baked with directional information.
 * 
 * **Note:** Changing this value on already baked lightmaps will not cause them to be baked again. This means the material appearance will look incorrect until lightmaps are baked again, in which case the value set here is discarded as the entire `LightmapGIData` resource is replaced by the lightmapper.
 * @param usesSphericalHarmonics boolean
 */
  setUsesSphericalHarmonics(usesSphericalHarmonics: boolean): void;
/**
 * Shadowmasking is disabled. No shadowmask texture will be created when baking lightmaps. Existing shadowmask textures will be removed during baking.
 */
  static readonly SHADOWMASK_MODE_NONE: int;
/**
 * Shadowmasking is enabled. Directional shadows that are outside the `DirectionalLight3D.directional_shadow_max_distance` will be rendered using the shadowmask texture. Shadows that are inside the range will be rendered using real-time shadows exclusively. This mode allows for more precise real-time shadows up close, without the potential "smearing" effect that can occur when using lightmaps with a high texel size. The downside is that when the camera moves fast, the transition between the real-time light and shadowmask can be obvious. Also, objects that only have shadows baked in the shadowmask (and no real-time shadows) won't display any shadows up close.
 */
  static readonly SHADOWMASK_MODE_REPLACE: int;
/**
 * Shadowmasking is enabled. Directional shadows will be rendered with real-time shadows overlaid on top of the shadowmask texture. This mode makes for smoother shadow transitions when the camera moves fast, at the cost of a potential smearing effect for directional shadows that are up close (due to the real-time shadow being mixed with a low-resolution shadowmask). Objects that only have shadows baked in the shadowmask (and no real-time shadows) will keep their shadows up close.
 */
  static readonly SHADOWMASK_MODE_OVERLAY: int;
}
